/*

TODO:

* why is caps_word not working?

* how to specify actions for turning the encoder on a particular layer

* how to specify bluetooth-related functionality

* how to specify underglow-related functionality

* how to illuminate the RGB LED for a specific key

* can i rearrange the layer definitions to remove the encoder and d-pad from their current positions and place them underneath? (it's confusing to have them in the middle)

key numbers

 0  1  2  3  4  5          6       7  8  9 10 11 12
13 14 15 16 17 18      19 20 21   22 23 24 25 26 27
28 29 30 31 32 33   34    35      36 37 38 39 40 41
         42 43 44                 45 46 47


 0  1  2  3  4  5          6       7  8  9 10 11 12
    q  w  e  r  t                  y  u  i  o  p  '

13 14 15 16 17 18      19 20 21   22 23 24 25 26 27
    a  s  d  f  g                  h  j  k  l  ;  '

28 29 30 31 32 33   34    35      36 37 38 39 40 41
    z  x  c  v  b                  n  m  ,  .  /

         42 43 44                 45 46 47

*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

// No need for tap-hold-layer header with specialized behaviors


#include <input/processors.dtsi>

#define BASE 0
#define NUMERIC 1
#define NAVIGATION 2
#define FN 3
#define EXTRA 4
#define SYSTEM 5
#define MODIFIER_LEFT_NAV 6
#define MODIFIER_RIGHT_NAV 7

#define HRM_TIMEOUT 400
#define TAP_TIMEOUT 50
#define CHORD_TIMEOUT 50

/*

   &mmv_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

   &msc_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

 */

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10

#include "build_info.dtsi"


/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <HRM_TIMEOUT>;
            quick-tap-ms = <200>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    // Temporarily switches to a layer (`&mo`) while a modifier is held
    // &lm NUM_LAYER LSHIFT
    lm: lm {
    	compatible = "zmk,behavior-macro-two-param";
	wait-ms = <0>;
        tap-ms = <0>;
        #binding-cells = <2>;
        bindings
            = <&macro_param_1to1>
            , <&macro_press &mo MACRO_PLACEHOLDER>
            , <&macro_param_2to1>
            , <&macro_press &kp MACRO_PLACEHOLDER>
            , <&macro_pause_for_release>
            , <&macro_param_2to1>
            , <&macro_release &kp MACRO_PLACEHOLDER>
            , <&macro_param_1to1>
            , <&macro_release &mo MACRO_PLACEHOLDER>
        ;
    };

/* incomplete definition but should have basics for changing underglow while momentarily in a layer.
   ideally would save/restore preexisting underglow color.
   
    mo_rgb: mo_rgb {
        wait-ms = <0>;
 	tap-ms = <0>;
	bindings
	    = <&macro_press &mo 1>
	        , <&macro_tap &rgb_ug RGB_COLOR_HSB(128,100,100)>
		, <&macro_pause_for_release>
		, <&macro_release &mo 1>
		, <&macro_tap &rgb_ug RGB_COLOR_HSB(300,100,50)>
	;
    ;

   there should also be a way of entering emoji via macros here. check https://zmk.dev/docs/keymaps/behaviors/macros

*/

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;
        tap-ms = <30>;
    };

    combos {
        compatible = "zmk,combos";
        
	// bootloader with far left column
	combo_bootloader_left {
            timeout-ms = <CHORD_TIMEOUT>;
            key-positions = <0 13 28>;
            bindings = <&bootloader>;
	};
	// bootloader with far right column
	combo_bootloader_right {
            timeout-ms = <CHORD_TIMEOUT>;
            key-positions = <12 27 41>;
            bindings = <&bootloader>;
	};


        // ESC with tab+q
        combo_esc {
            timeout-ms = <CHORD_TIMEOUT>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };

        // numeric with e+i
        combo_num {
            timeout-ms = <CHORD_TIMEOUT>;
            key-positions = <3 9>;
            bindings = <&to NUMERIC>;
        };

	// navigation with c+, and caps+'
        combo_nav {
            timeout-ms = <CHORD_TIMEOUT>;
            key-positions = <31 38>;
            bindings = <&to NAVIGATION>;
        };
        combo_nav_2 {
            timeout-ms = <CHORD_TIMEOUT>;
            key-positions = <13 27>;
            bindings = <&to NAVIGATION>;
        };

        // One-shot modifiers with dual key presses
        combo_os_ctrl {
            timeout-ms = <CHORD_TIMEOUT>;
            key-positions = <14 26>;
            bindings = <&sk LCTRL>;
        };

        combo_os_alt {
            timeout-ms = <CHORD_TIMEOUT>;
            key-positions = <16 24>;
            bindings = <&sk LALT>;
        };

        combo_os_gui {
            timeout-ms = <CHORD_TIMEOUT>;
            key-positions = <17 23>;
            bindings = <&sk LGUI>;
        };

        // Caps word with s+l
        combo_caps_word {
            timeout-ms = <CHORD_TIMEOUT>;
            key-positions = <15 25>;
            bindings = <&caps_word>;
        };

        // Base layer with space keys
        combo_base {
            timeout-ms = <CHORD_TIMEOUT>;
            key-positions = <44 45>;
            bindings = <&to BASE>;
        };

        // Print screen (which i use for screenshot)
        combo_print {
            timeout-ms = <CHORD_TIMEOUT>;
            key-positions = <28 29>;
            bindings = <&kp PRINTSCREEN>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            display-name = "base";
            bindings = <

&kp TAB                       &kp Q        &kp W         &lt NUMERIC E     &kp R                                &kp T			     &kp UP                  &kp Y  &kp U        &lt NUMERIC I         &kp O         &kp P           &kp BSPC
&lt NAVIGATION K_APPLICATION  &hm LCTRL A  &hm LSHIFT S  &hm LALT D        &lth MODIFIER_LEFT_NAV F  &kp G              &kp LEFT  &tog SYSTEM  &kp RIGHT &kp H        &lt MODIFIER_RIGHT_NAV J  &hm RALT K            &hm RSHIFT L  &hm RCTRL SEMI  &lt NAVIGATION SQT
&kp LCTRL            	      &kp Z        &kp X         &lt NAVIGATION C  &kp V                                &kp B   &kp C_MUTE           &kp DOWN                &kp N  &kp M                     &lt NAVIGATION COMMA  &kp DOT       &kp FSLH        &kp RET
                                     &lt EXTRA ESC     &kp TAB     &kp SPACE                                               &kp SPACE    &kp BSPC    &lt FN RET
             >;
            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        numeric_layer {
            display-name = "numeric";
            bindings = <
&kp GRAVE      &kp EXCL         &kp AT               &kp HASH      &kp DOLLAR   &kp PERCENT                            &mmv MOVE_UP                   &kp CARET &kp AMPS      &kp ASTERISK     &kp LPAR              &kp RPAR            &kp EQUAL
&kp N0         &hm LCTRL N1     &hm LSHIFT N2        &hm LALT N3   &hm LGUI N4  &kp N5                  &mmv MOVE_LEFT &mkp LCLK      &mmv MOVE_RIGHT &kp N6    &hm RGUI N7   &hm RALT N8      &hm RSHIFT N9         &hm RCTRL N0              &kp MINUS
//&trans &trans &trans &trans &trans &trans        &trans &trans &trans    &trans &trans &trans  &trans &hm RCTRL N0  &kp MINUS
&kp LEFT_BRACE &kp LEFT_BRACKET &kp LEFT_PARENTHESIS &kp LESS_THAN &kp SLASH    &kp MINUS    &kp C_MUTE                &mmv MOVE_DOWN                 &kp PLUS  &kp BACKSLASH &kp GREATER_THAN &kp RIGHT_PARENTHESIS &kp RIGHT_BRACKET   &kp RIGHT_BRACE
                                                     &kp PIPE      &kp TAB      &kp SPACE                                                             &kp SPACE &kp BACKSPACE &kp PERIOD
            >;
            sensor-bindings = <&scroll_encoder>;
        };

        navigation_layer {
            display-name = "navigation";
            bindings = <
&kp HOME  &kp PG_UP        &kp INSERT             &kp UP_ARROW         &kp DELETE            &msc SCRL_UP                             &mmv MOVE_UP                   &msc SCRL_UP    &kp INSERT            &kp UP_ARROW         &kp DELETE              &kp PG_UP         &kp HOME
&kp END   &hm LCTRL PG_DN  &hm LSHIFT LEFT_ARROW  &hm LALT DOWN_ARROW  &hm LGUI RIGHT_ARROW  &msc SCRL_DOWN            &mmv MOVE_LEFT &kp HOME      &mmv MOVE_RIGHT  &msc SCRL_DOWN  &hm RGUI LEFT_ARROW   &hm RALT DOWN_ARROW  &hm RSHIFT RIGHT_ARROW  &hm RCTRL PG_DN   &kp END
&trans    &trans           &trans                 &trans               &trans                &trans          &kp HOME                 &mmv MOVE_DOWN                 &trans            &trans         &trans         &trans          &trans      &trans
                                                  &trans               &trans                &kp LEFT_ARROW                                                          &kp RIGHT_ARROW   &trans         &trans
            >;
            sensor-bindings = <&scroll_encoder>;
        };

        function_layer {
            display-name = "function";
            bindings = <
&kp F1      &kp F2      &kp F3       &kp F4     &kp F5     &kp F6                               &mmv MOVE_UP                     &kp F7     &kp F8       &kp F9      &kp F10      &kp F11        &kp F12
&kp F13     &kp F14     &kp F15      &kp F16    &kp F17    &kp F18              &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &kp F19    &kp F20      &kp F21     &kp F22      &kp F23        &kp F24
&trans  &sys_reset  &trans      &bootloader  &trans     &mkp MB5  &kp C_MUTE                    &mmv MOVE_DOWN                   &trans       &trans     &bootloader  &sys_reset  &kp SCROLLLOCK &kp PAUSE_BREAK
                                 &trans      &trans      &build_time                                                             &build_time       &trans     &trans
            >;
            sensor-bindings = <&scroll_encoder>;
        };

        extra_layer {
            display-name = "extra";
            bindings = <
 &kp F1      &kp F2      &kp F3       &kp F4     &kp F5     &kp F6                               &mmv MOVE_UP                     &kp F7     &kp F8       &kp F9      &kp F10          &kp F11   &kp F12
&kp F13     &kp F14     &kp F15      &kp F16    &kp F17    &kp F18              &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &kp F19    &kp F20      &kp F21     &kp F22     &kp F23        &kp F24
&trans  &sys_reset  &trans      &bootloader  &trans     &mkp MB5  &kp C_MUTE                    &mmv MOVE_DOWN                   &trans       &trans     &bootloader  &sys_reset  &kp SCROLLLOCK   &kp PAUSE_BREAK
                                &trans      &trans      &trans                                                                   &trans       &trans     &trans
            >;
            sensor-bindings = <&scroll_encoder>;
        };

        system_layer {
            display-name = "system";
            bindings = <
&bt BT_CLR       &bt BT_CLR_ALL  &kp F3        &kp F4        &kp F5        &kp F6                                      &mmv MOVE_UP                     &kp F7           &kp F8           &kp F9           &kp F10          &kp F11   &kp F12
&bt BT_SEL 0     &bt BT_SEL 1    &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_SEL 5                &mmv MOVE_LEFT  &tog SYSTEM     &mmv MOVE_RIGHT  &kp LEFT         &kp DOWN         &kp UP           &kp RIGHT        &kp HOME  &kp PG_UP
&trans           &rgb_ug RGB_OFF &rgb_ug RGB_ON  &trans        &trans            &rgb_ug RGB_EFF  &kp C_MUTE                 &mmv MOVE_DOWN                   &rgb_ug RGB_EFR  &rgb_ug RGB_SPI  &rgb_ug RGB_BRI  &rgb_ug RGB_BRD  &kp END   &kp PG_DN
                                           &trans        &trans            &trans                                                                       &trans           &trans           &trans
            >;
            sensor-bindings = <&scroll_encoder>;
        };


        mod_l_nav_layer {
            display-name = "L GUI+nav";
            bindings = <
&kp LG(TAB)  &kp LG(Q)        &kp LG(W)         &kp LG(E)       &kp LG(R)    &kp LG(T)                             &mmv MOVE_UP                     &msc LG(SCRL_UP)    &kp LG(INSERT)      &kp LG(UP_ARROW)    &kp LG(DELETE)       &kp LG(PG_UP)  &kp LG(HOME)
&trans       &hm LCTRL LG(A)  &hm LSHIFT LG(S)  &hm LALT LG(D)  &trans       &kp LG(G)              &mmv MOVE_LEFT &kp HOME        &mmv MOVE_RIGHT  &msc LG(SCRL_DOWN)  &kp LG(LEFT_ARROW)  &kp LG(DOWN_ARROW)  &kp LG(RIGHT_ARROW)  &kp LG(PG_DN)  &kp LG(END)
&trans       &kp LG(Z)        &kp LG(X)         &kp LG(C)       &kp LG(V)    &kp LG(B)    &kp HOME                 &mmv MOVE_DOWN                   &kp LG(N)           &kp LG(M)           &kp LG(COMMA)       &kp LG(DOT)          &kp LG(FSLH)   &kp LG(RET)
                                                &kp LG(ESC)     &kp LG(TAB)  &mo BASE                                                               &mo BASE            &kp LG(BSPC)        &kp LG(RET)
            >;
            sensor-bindings = <&scroll_encoder>;
        };


        mod_r_nav_layer {
            display-name = "R GUI+nav";
            bindings = <
&kp RG(HOME)  &kp RG(PG_UP)  &kp RG(INSERT)      &kp RG(UP_ARROW)    &kp RG(DELETE)       &msc RG(SCRL_UP)                              &mmv MOVE_UP                 &kp RG(Y)  &kp RG(U)  &kp RG(I)  &kp RG(O)  &kp RG(P)  &kp RG(BSPC)
&kp RG(END)   &kp RG(PG_DN)  &kp RG(LEFT_ARROW)  &kp RG(DOWN_ARROW)  &kp RG(RIGHT_ARROW)  &msc RG(SCRL_DOWN)             &mmv MOVE_LEFT &kp HOME        &mmv MOVE_RIGHT  &kp RG(H) &kp RG(J) &kp RG(K) &kp RG(L) &kp RG(SEMI) &kp RG(SQT)
&kp RG(LCTRL) &kp RG(Z) &kp RG(X) &kp RG(C) &kp RG(V) &kp RG(B)            &kp HOME                 &mmv MOVE_DOWN                     &kp RG(N) &kp RG(M) &kp RG(COMMA) &kp RG(DOT) &kp RG(FSLH) &kp RG(RET)
                                                &kp LG(ESC)     &kp LG(TAB)  &mo BASE                                                               &mo BASE            &kp LG(BSPC)        &kp LG(RET)
            >;
            sensor-bindings = <&scroll_encoder>;
        };


/*
        empty_layer {
            display-name = "empty";
            bindings = <
&trans &trans &trans &trans &trans &trans                  &trans          &trans &trans &trans &trans &trans &trans 
&trans &trans &trans &trans &trans &trans           &trans &trans &trans   &trans &trans &trans &trans &trans &trans 
&trans &trans &trans &trans &trans &trans   &trans         &trans          &trans &trans &trans &trans &trans &trans 
                     &trans &trans &trans                                  &trans &trans &trans 
            >;
            sensor-bindings = <&scroll_encoder>;
        };
*/




     }; /* keymap */
};
